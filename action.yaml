name: "List Changed Files"

description: |
  Get a list of changed files and filter them by a list of path patterns similar to .gitignore

branding:
  icon: list
  color: purple

inputs:
  paths:
    type: string
    description: Pattern list in the .gitignore syntax to match against changed files
    required: false
  token:
    type: string
    required: false
    default: "${{ github.token }}"

outputs:
  changed_files:
    description: A multi-line string containing the list of changed files.
    value: ${{ fromJson(steps.match-paths.outputs.result).changed_files }}
  changed_files_json:
    description: A JSON string containing the list of changed files.
    value: ${{ fromJson(steps.match-paths.outputs.result).changed_files_json }}
  matched_files:
    description: A multi-line string containing the list of changed files matching `paths` patterns.  Empty ("") if `paths` is not given.
    value: ${{ fromJson(steps.match-paths.outputs.result).matched_files }}
  matched_files_json:
    description: A JSON string containing the list of changed files matching `paths` patterns.  Empty ([]) if `paths` is not given.
    value: ${{ fromJson(steps.match-paths.outputs.result).matched_files_json }}

runs:
  using: composite
  steps:
    - id: get-changed-files
      name: Get Changed Files
      env:
        GH_TOKEN: "${{ inputs.token }}"
      run: |
        EOS=$(openssl rand -hex 64)
        {
          set -x
          echo "changed_file_list<<$EOS"
          if [ "${{github.event_name}}" = "pull_request" ]; then
            gh api 'repos/${{github.event.pull_request.base.repo.full_name}}/compare/${{github.event.pull_request.base.sha}}...${{github.event.pull_request.head.label}}' --jq '.files[].filename'
          else
            gh api 'repos/${{github.repository}}/compare/${{github.event.before}}...${{github.event.after}}' --jq .files[].filename
          fi
          echo "$EOS"
        } >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Install ignore
      run: cd /home/runner/work && npm install --no-save ignore
      shell: bash
    - uses: actions/github-script@v7
      id: match-paths
      env:
        CHANGED_FILE_LIST: ${{ steps.get-changed-files.outputs.changed_file_list }}
        PATHS: ${{ inputs.paths }}
      with:
        result-encoding: string
        script: |
          const ignore = require('ignore');
          const { PATHS: paths, CHANGED_FILE_LIST: changed_file_list } = process.env;
          const changed_files = changed_file_list.split('\n').filter(Boolean);
          console.log(paths);
          const matched_files =
            paths ? (() => {
              const matcher = ignore().add(paths);
              return changed_files.filter(file => matcher.ignores(file));
            })() : [];
          return JSON.stringify({
            changed_files: changed_files.map(file => `${file}\n`).join(''),
            changed_files_json: JSON.stringify(changed_files),
            matched_files: matched_files.map(file => `${file}\n`).join(''),
            matched_files_json: JSON.stringify(matched_files),
          });
